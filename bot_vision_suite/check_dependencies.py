#!/usr/bin/env python3
"""
Script de verifica√ß√£o das depend√™ncias do Bot Vision Suite.

Este script verifica se todas as depend√™ncias necess√°rias est√£o instaladas
com as vers√µes corretas.
"""

import sys
import importlib
import pkg_resources

# Depend√™ncias obrigat√≥rias com vers√µes espec√≠ficas
REQUIRED_PACKAGES = {
    "PyAutoGUI": "0.9.54",
    "numpy": "1.26.4", 
    "opencv-python": "4.9.0.80",
    "pytesseract": None,  # Sem vers√£o espec√≠fica
    "pyperclip": None,    # >= 1.8.2
    "Pillow": None,       # >= 10.0.0
}

# Depend√™ncias opcionais
OPTIONAL_PACKAGES = {
    "keyboard": "0.13.5",
    "MouseInfo": "0.1.3",
    "pandas": None,
    "openai": None,
    "webdriver-manager": None,
}

def check_package(package_name, expected_version=None):
    """
    Verifica se um package est√° instalado e opcionalmente sua vers√£o.
    
    Args:
        package_name (str): Nome do package
        expected_version (str, optional): Vers√£o esperada
        
    Returns:
        tuple: (is_installed, current_version, version_match)
    """
    try:
        # Tenta importar o package
        if package_name == "opencv-python":
            import cv2
            installed_version = cv2.__version__
        elif package_name == "PyAutoGUI":
            import pyautogui
            installed_version = pyautogui.__version__
        elif package_name == "Pillow":
            import PIL
            installed_version = PIL.__version__
        else:
            module = importlib.import_module(package_name.lower().replace("-", "_"))
            installed_version = getattr(module, '__version__', 'unknown')
        
        # Verifica vers√£o se especificada
        if expected_version:
            version_match = installed_version == expected_version
        else:
            version_match = True
            
        return True, installed_version, version_match
        
    except ImportError:
        return False, None, False
    except Exception as e:
        return False, str(e), False

def main():
    """Fun√ß√£o principal de verifica√ß√£o."""
    print("=" * 60)
    print("BOT VISION SUITE - VERIFICA√á√ÉO DE DEPEND√äNCIAS")
    print("=" * 60)
    
    all_good = True
    
    # Verifica depend√™ncias obrigat√≥rias
    print("\nüì¶ DEPEND√äNCIAS OBRIGAT√ìRIAS:")
    print("-" * 40)
    
    for package, expected_version in REQUIRED_PACKAGES.items():
        is_installed, current_version, version_match = check_package(package, expected_version)
        
        if is_installed:
            if expected_version and version_match:
                status = "‚úÖ OK"
                print(f"{package:15} | {current_version:10} | {status}")
            elif expected_version and not version_match:
                status = f"‚ö†Ô∏è  Vers√£o incorreta (esperada: {expected_version})"
                print(f"{package:15} | {current_version:10} | {status}")
                all_good = False
            else:
                status = "‚úÖ OK"
                print(f"{package:15} | {current_version:10} | {status}")
        else:
            status = "‚ùå N√ÉO INSTALADO"
            print(f"{package:15} | {'N/A':10} | {status}")
            all_good = False
    
    # Verifica depend√™ncias opcionais
    print("\nüì¶ DEPEND√äNCIAS OPCIONAIS:")
    print("-" * 40)
    
    for package, expected_version in OPTIONAL_PACKAGES.items():
        is_installed, current_version, version_match = check_package(package, expected_version)
        
        if is_installed:
            if expected_version and version_match:
                status = "‚úÖ OK"
            elif expected_version and not version_match:
                status = f"‚ö†Ô∏è  Vers√£o incorreta (esperada: {expected_version})"
            else:
                status = "‚úÖ OK"
            print(f"{package:15} | {current_version:10} | {status}")
        else:
            status = "‚ö™ Opcional - n√£o instalado"
            print(f"{package:15} | {'N/A':10} | {status}")
    
    # Verifica se o Bot Vision Suite pode ser importado
    print("\nü§ñ BOT VISION SUITE:")
    print("-" * 40)
    
    try:
        from _bot_vision import BotVision, execute_tasks, click_images
        print("bot_vision       | Importado  | ‚úÖ OK")
        
        # Testa inicializa√ß√£o b√°sica
        bot = BotVision()
        print("BotVision()      | Instancia  | ‚úÖ OK")
        
    except ImportError as e:
        print(f"bot_vision       | Error      | ‚ùå ERRO: {e}")
        all_good = False
    except Exception as e:
        print(f"bot_vision       | Error      | ‚ùå ERRO: {e}")
        all_good = False
    
    # Resultado final
    print("\n" + "=" * 60)
    if all_good:
        print("üéâ TODAS AS DEPEND√äNCIAS OBRIGAT√ìRIAS EST√ÉO OK!")
        print("‚úÖ Bot Vision Suite est√° pronto para uso.")
    else:
        print("‚ùå ALGUMAS DEPEND√äNCIAS OBRIGAT√ìRIAS EST√ÉO FALTANDO OU INCORRETAS!")
        print("\nPara instalar as depend√™ncias corretas, execute:")
        print("pip install PyAutoGUI==0.9.54 numpy==1.26.4 opencv-python==4.9.0.80")
        print("pip install pytesseract pyperclip Pillow")
    
    print("=" * 60)
    
    return 0 if all_good else 1

if __name__ == "__main__":
    sys.exit(main())
